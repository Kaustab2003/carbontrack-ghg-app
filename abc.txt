from flask import Flask, render_template, request, redirect, url_for, flash, session, send_file
from werkzeug.security import generate_password_hash, check_password_hash
import pandas as pd
import joblib
import os
from datetime import datetime
from io import BytesIO
import pyotp
from flask_caching import Cache
from itsdangerous import URLSafeTimedSerializer
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
import smtplib
from fpdf import FPDF


app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', 'your_secret_key_here')
app.config['SECURITY_PASSWORD_SALT'] = os.getenv('SECURITY_PASSWORD_SALT', 'your_salt_here')

cache = Cache(app, config={'CACHE_TYPE': 'simple'})
model = joblib.load('model/emission_model.pkl')

users_db = pd.DataFrame(columns=['username', 'password', 'email', '2fa_secret'])
HISTORY_FILE = 'history.csv'

EMAIL_CONFIG = {
    'sender': os.getenv('EMAIL_SENDER', 'your_email@example.com'),
    'password': os.getenv('EMAIL_PASSWORD', 'your_email_password'),
    'smtp_server': os.getenv('SMTP_SERVER', 'smtp.example.com'),
    'smtp_port': int(os.getenv('SMTP_PORT', 587))
}

if not os.path.exists(HISTORY_FILE):
    with open(HISTORY_FILE, 'w') as f:
        f.write('timestamp,username,industry,emission_data,energy_consumption,waste_production,water_consumption,facility_size,prediction\n')

def save_prediction(username, data):
    data["username"] = username
    with open(HISTORY_FILE, 'a') as f:
        f.write(f"{data['timestamp']},{username},{data['industry']},{data['emission_data']},"
                f"{data['energy_consumption']},{data['waste_production']},{data['water_consumption']},"
                f"{data['facility_size']},{data['prediction']}\n")

def get_user_history(username):
    if not os.path.exists(HISTORY_FILE):
        return pd.DataFrame()
    history_df = pd.read_csv(HISTORY_FILE)
    return history_df[history_df['username'] == username]

def generate_pdf(data):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="GHG Emission Prediction Report", ln=True, align="C")
    pdf.ln(10)
    for key, value in data.items():
        pdf.cell(200, 10, txt=f"{key}: {value}", ln=True)
    pdf_output = pdf.output(dest='S').encode('latin1')
    return BytesIO(pdf_output)

def send_email(to_email, subject, body, attachment=None):
    msg = MIMEMultipart()
    msg['From'] = EMAIL_CONFIG['sender']
    msg['To'] = to_email
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))
    if attachment:
        part = MIMEApplication(attachment.read(), Name="prediction_report.pdf")
        part['Content-Disposition'] = 'attachment; filename="prediction_report.pdf"'
        msg.attach(part)
    with smtplib.SMTP(EMAIL_CONFIG['smtp_server'], EMAIL_CONFIG['smtp_port']) as server:
        server.starttls()
        server.login(EMAIL_CONFIG['sender'], EMAIL_CONFIG['password'])
        server.send_message(msg)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/dashboard')
def dashboard():
    if 'username' not in session:
        return redirect(url_for('login'))
    return render_template('dashboard.html', username=session['username'])

@app.route('/predict', methods=['GET'])
def predict_form():
    if 'username' not in session:
        return redirect(url_for('login'))
    return render_template('predict.html')

@app.route('/predict', methods=['POST'])
def predict():
    try:
        scaler = joblib.load("model/scaler.pkl")
        feature_names = joblib.load("model/feature_names.pkl")

        industry = request.form.get("industry", "Manufacturing")
        emission_data = float(request.form["emission_data"])
        energy = float(request.form["energy_consumption"])
        waste = float(request.form["waste_production"])
        water = float(request.form["water_consumption"])
        area = float(request.form["facility_size"])

        input_data = pd.DataFrame([[energy, waste, water, area]], columns=feature_names)
        input_scaled = scaler.transform(input_data)
        prediction = model.predict(input_scaled)[0]

        prediction_id = datetime.now().isoformat()

        if "username" in session:
            save_prediction(session["username"], {
                "industry": industry,
                "emission_data": emission_data,
                "energy_consumption": energy,
                "waste_production": waste,
                "water_consumption": water,
                "facility_size": area,
                "prediction": prediction,
                "timestamp": prediction_id
            })
            session["last_prediction_id"] = prediction_id

        return render_template("result.html", 
                               prediction=round(prediction, 2), 
                               prediction_id=prediction_id)
    except Exception as e:
        return f"An error occurred: {e}"

@app.route('/generate_pdf/<prediction_id>')
def generate_pdf_report(prediction_id):
    try:
        history = get_user_history(session['username'])
        match = history[history['timestamp'] == prediction_id]
        if match.empty:
            return "Prediction not found.", 404
        prediction_data = match.iloc[0].to_dict()
        pdf_stream = generate_pdf(prediction_data)
        return send_file(pdf_stream, mimetype='application/pdf', as_attachment=True, download_name='prediction_report.pdf')
    except Exception as e:
        return f"An error occurred while generating PDF: {e}", 500

@app.route('/email_results/<prediction_id>', methods=['GET', 'POST'])
def email_results(prediction_id):
    if 'username' not in session:
        return redirect(url_for('login'))
    if request.method == 'POST':
        email = request.form['email']
        history = get_user_history(session['username'])
        prediction_data = history[history['timestamp'] == prediction_id].iloc[0].to_dict()
        try:
            pdf_bytes = generate_pdf(prediction_data)
            send_email(
                email,
                "Your GHG Emission Prediction Report",
                f"Please find attached your report.\nPredicted CO₂ Emissions: {prediction_data['prediction']} tons/year",
                attachment=pdf_bytes
            )
            flash('Email sent successfully!')
        except Exception as e:
            flash(f'Failed to send email: {str(e)}')
        return redirect(url_for('dashboard'))
    return render_template('email_form.html', prediction_id=prediction_id)

@app.route('/batch_predict', methods=['GET', 'POST'])
def batch_predict():
    if 'username' not in session:
        return redirect(url_for('login'))

    if request.method == 'POST':
        file = request.files.get('file')
        if not file or not file.filename.endswith('.csv'):
            flash("Please upload a valid CSV file.")
            return redirect(request.url)

        try:
            df = pd.read_csv(file)
            df.columns = df.columns.str.strip().str.lower()

            scaler = joblib.load("model/scaler.pkl")
            feature_names = joblib.load("model/feature_names.pkl")

            required = ['industry', 'emission_data'] + feature_names
            missing_cols = [col for col in required if col not in df.columns]
            if missing_cols:
                flash(f"⚠️ Missing columns in CSV: {', '.join(missing_cols)}")
                return redirect(request.url)

            input_data = df[feature_names]
            valid_input_data = input_data.dropna()
            skipped_rows = len(input_data) - len(valid_input_data)

            if skipped_rows > 0:
                flash(f"⚠️ Skipped {skipped_rows} row(s) due to missing values in required columns.")

            scaled_input = scaler.transform(valid_input_data)
            df.loc[valid_input_data.index, 'prediction'] = model.predict(scaled_input)

            for _, row in df.iterrows():
                row_data = row.to_dict()
                row_data["timestamp"] = datetime.now().isoformat()
                save_prediction(session['username'], row_data)

            output = BytesIO()
            df.to_csv(output, index=False)
            output.seek(0)
            return send_file(output, mimetype='text/csv', as_attachment=True, download_name='batch_predictions.csv')

        except Exception as e:
            flash(f"Error: {str(e)}")
            return redirect(request.url)

    return render_template("batch_predict.html")

@app.route('/visualization')
@cache.cached(timeout=60, query_string=True)
def visualization():
    if 'username' not in session:
        return redirect(url_for('login'))

    history = get_user_history(session['username'])

    if history.empty or 'timestamp' not in history.columns or 'prediction' not in history.columns:
        flash("No prediction history available for visualization.")
        return redirect(url_for('dashboard'))

    return render_template('visualization.html', history=history)

@app.route('/history')
def view_history():
    if 'username' not in session:
        return redirect(url_for('login'))

    history = get_user_history(session['username'])
    return render_template('history.html', history=history)

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        email = request.form.get('email', '')
        if username in users_db['username'].values:
            flash('Username already exists')
            return redirect(url_for('register'))
        hashed_pw = generate_password_hash(password)
        users_db.loc[len(users_db)] = [username, hashed_pw, email, None]
        flash('Registration successful! Please login.')
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = users_db[users_db['username'] == username]

        if user.empty or not check_password_hash(user['password'].values[0], password):
            flash('Invalid username or password')
            return redirect(url_for('login'))

        if pd.notna(user['2fa_secret'].values[0]):
            session['temp_username'] = username
            return redirect(url_for('verify_2fa'))

        session['username'] = username
        return redirect(url_for('dashboard'))

    return render_template('login.html')

@app.route('/profile')
def profile():
    if 'username' not in session:
        return redirect(url_for('login'))

    user = users_db[users_db['username'] == session['username']]
    if user.empty:
        flash("User not found.")
        return redirect(url_for('dashboard'))

    user_info = {
        'username': user['username'].values[0],
        'email': user['email'].values[0],
        'two_fa_enabled': pd.notna(user['2fa_secret'].values[0])
    }

    return render_template('profile.html', user_info=user_info)

@app.route('/logout')
def logout():
    session.clear()
    flash('You have been logged out.')
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)
